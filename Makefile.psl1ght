#-------------------------------------------------------------------------------
# Clear the implicit built in rules
#-------------------------------------------------------------------------------
.SUFFIXES:
#-------------------------------------------------------------------------------
ifeq ($(strip $(PSL1GHT)),)
$(error "Please set PSL1GHT in your environment. export PSL1GHT=<path>")
endif

include $(PSL1GHT)/ppu_rules

include version.all

DEBUG						= 0
HAVE_LOGGER					= 0
HAVE_FILE_LOGGER			= 1

PC_DEVELOPMENT_IP_ADDRESS	= "192.168.1.7"
PC_DEVELOPMENT_UDP_PORT		= 3490

CONTENTID		= UP0001-SSNE10001_00-0000000000000001
APPID                   = SSNE10001
TITLE                   = Retroarch PSL1GHT
PACKAGE_BASENAME := retroarch_psl1ght

ELF_TARGET  := retroarch_psl1ght.elf
SELF_TARGET := $(ELF_TARGET:.elf=.self)
CORE_PATH    = pkg/psl1ght/pkg/USRDIR/cores/CORE.SELF

INCLUDE += -I. -Ideps -Ideps/stb -Ilibretro-common/include/compat/zlib -Ilibretro-common/include $(LIBPSL1GHT_INC) -Iinclude -Idefines -I$(PORTLIBS)/include -I$(PORTLIBS)/include/freetype2
LIBDIRS += -L. -L$(PORTLIBS)/lib

ifeq ($(HAVE_STATIC_DUMMY),1)
   DEFINES += -DHAVE_STATIC_DUMMY
   LIBS :=
else
   LIBS := -lretro_psl1ght
endif

MACHDEP := -D__PSL1GHT__ -D__PS3__ -mcpu=cell
CFLAGS += -Wall $(DEFINES) $(MACHDEP) $(INCLUDE)
LDFLAGS := $(MACHDEP)
LIBS += -lGL -lEGL -lGL -lstdc++ -lrt -laudio -lrsx -lgcm_sys -lnet -lio -lsysutil -lsysmodule -lm -ljpgdec -lpngdec -llv2 -lnet -lnetctl -lsysfs -lfreetype -lcamera -lgem -lspurs

# system platform
system_platform = unix
ifeq ($(shell uname -a),)
EXE_EXT = .exe
   system_platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   system_platform = osx
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   system_platform = win
endif

PKG_SCRIPT		= tools/ps3/ps3py/pkg.py
ifeq ($(shell uname), Linux)
GIT			= git
else
GIT			= git.exe
endif

ifeq ($(HAVE_GCM), 1)
SHADER_OBJS = gfx/drivers/rsx_shaders/modern_opaque.vpo.o \
              gfx/drivers/rsx_shaders/modern_opaque.fpo.o \
              gfx/drivers/rsx_shaders/modern_alpha_blend.vpo.o \
              gfx/drivers/rsx_shaders/modern_alpha_blend.fpo.o
endif

LIBCO_OBJ = libretro-common/libco/ps3.o

HAVE_CC_RESAMPLER = 1
HAVE_MENU_COMMON = 1
HAVE_RTGA = 1
HAVE_RPNG = 1
HAVE_RJPEG = 1
HAVE_RBMP = 1
HAVE_MENU = 1
HAVE_RGUI = 1
HAVE_OZONE = 1
HAVE_ZLIB = 1
HAVE_7ZIP = 1
HAVE_BUILTINZLIB = 1
HAVE_CHD = 1
HAVE_LIBRETRODB = 1
HAVE_XMB = 1
HAVE_STATIC_VIDEO_FILTERS = 1
HAVE_STATIC_AUDIO_FILTERS = 1
HAVE_PATCH = 1
HAVE_SCREENSHOTS = 1
HAVE_REWIND = 1
HAVE_AUDIOMIXER = 1
HAVE_RWAV = 1
HAVE_CHEATS = 1
HAVE_VIDEO_FILTER = 1
HAVE_DSP_FILTER = 1
HAVE_CONFIGFILE = 1
HAVE_OVERLAY = 1
HAVE_GFX_WIDGETS = 1
HAVE_NETWORKING = 1
HAVE_SOCKET_LEGACY = 1
HAVE_CORE_INFO_CACHE = 1
HAVE_HID = 1
BIG_STACK 					= 1
HAVE_OPENGL_CORE 			= 1
HAVE_EGL					= 1
HAVE_GLSL 					= 1
HAVE_GCM 					= 0

OBJ = $(SHADER_OBJS) $(LIBCO_OBJ) libretro-common/memmap/memmap.o

ifeq ($(HAVE_LOGGER), 1)
CFLAGS		+= -DHAVE_LOGGER
endif

ifeq ($(HAVE_FILE_LOGGER), 1)
CFLAGS		+= -DHAVE_FILE_LOGGER
endif

include Makefile.common

OBJ += gfx/drivers_context/ps3_ctx.o \
	input/drivers/ps3_input.o \
	input/drivers_joypad/ps3_joypad.o \
	audio/drivers/ps3_audio.o \
	frontend/drivers/platform_ps3.o

CFLAGS += -std=gnu99 $(DEF_FLAGS) -I. $(INCLUDE_DIRS)

CFLAGS += -DRARCH_INTERNAL -DRARCH_CONSOLE
CFLAGS += -DHAVE_FILTERS_BUILTIN
CFLAGS += -DHAVE_ONLINE_UPDATER -DHAVE_UPDATE_CORES -DHAVE_UPDATE_CORE_INFO
CFLAGS += -DHAVE_LIGHTGUN -DHAVE_HEADSET -DHAVE_MOUSE
CFLAGS += -DHAVE_SYSUTILS -DHAVE_SYSMODULES -DHAVE_NETWORKING
CFLAGS += -DPC_DEVELOPMENT_IP_ADDRESS=\"$(PC_DEVELOPMENT_IP_ADDRESS)\" \
	  -DPC_DEVELOPMENT_UDP_PORT=$(PC_DEVELOPMENT_UDP_PORT)


ifeq ($(HAVE_OPENGL_CORE), 1)
	CFLAGS += -DHAVE_OPENGL_MODERN -DGL3_PROTOTYPES -UHAVE_OPENGL -DHAVE_GLSL
endif
ifeq ($(DEBUG), 1)
	CFLAGS += -O0 -g
	CXXFLAGS += -O0 -g
else
	CFLAGS += -O3 -g
	CXXFLAGS += -O3 -g
endif

ifneq ($(V),1)
	Q := @
endif

all: $(SELF_TARGET)

define INFO
CXX: $(CXX)
LDFLAGS: $(LDFLAGS)
LIBDIRS: $(LIBDIRS)
LIBS: $(LIBS)
OBJ: $(OBJ)
endef
export INFO

info:
ifneq ($(V),1)
	@echo "$$INFO"
endif

$(ELF_TARGET): $(OBJ)
	@$(if $(Q), $(shell echo echo CXX $<),)
	$(Q)$(CXX) -o $@ $(LDFLAGS) $(LIBDIRS) $(OBJ) $(LIBS)

create-core: $(SELF_TARGET)
	cp $(SELF_TARGET) $(CORE_PATH)

pkg: create-core
	$(PKG) --contentid $(CONTENTID) pkg/psl1ght/pkg/ $(PACKAGE_BASENAME).pkg
	cp $(PACKAGE_BASENAME).pkg $(PACKAGE_BASENAME).gnpdrm.pkg
	$(PACKAGE_FINALIZE) $(PACKAGE_BASENAME).gnpdrm.pkg

clean:
	@$(if $(Q), echo $@,)
	$(Q)rm -f $(ELF_TARGET)
	$(Q)rm -f $(OBJ)

.PHONY: clean
